BattlePlayer(Object) : BattleEntityAction, InputListener {

	final Array buttons;
	ClientPlayer client;
	final BattleEntity entity;
	Battle battle;

	new(BattleEntity entity) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	void controllerDisconnected(Controller controller) {}

	void controllerConnected(Controller controller) {}

	boolean triggerButton(ButtonEvent event) {}

	int getInputPriority() {}

	boolean keyDown(int keycode) {}

	boolean addButtonTips(ButtonTipList tips) {}

	boolean triggerType(int character) {}

	boolean keyTyped(char character) {}

	boolean keyUp(int keycode) {}

	boolean triggerTouch(TouchEvent event) {}

	void add() {}

	void remove() {}

	void update(float delta) {}

	void init() {}

	void interrupt() {}

	void dispose() {}

	BattleEntityActionSave getSave() {}

	boolean isAuthorative() {}

	void hit(HitProperty hitProperty) {}

	void hitEntity(BattleEntity entity, OwnedHitProperty property) {}

	void vibrateController(float duration, float strength) {}

	final Controller getController() {}

	void move(int xTile, int yTile) {}

	int getGauge(VocEntry entry, int index) {}

	GameScreenMessage createRewardMessage(RandomVocRewards vocs, Random random, boolean skippable) {}

	boolean canUpgrade() {}

	boolean applyInput(KeyCode code, boolean pressed, boolean player) {}

	void applyInput(float delay, Object input) {}

	void cancelMove() {}

	void upgrade() {}

	MockController setKeyPressed(KeyCode code, boolean pressed) {}

	void createHud(int playerIndex) {}

	void setCombat(boolean combat) {}

	void setHudButtons(BattleHUD hud) {}

	boolean sendClientInput(Object input, boolean local) {}

	void clientInput(ButtonEvent event) {}

}
