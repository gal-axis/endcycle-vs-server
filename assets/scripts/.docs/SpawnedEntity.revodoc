SpawnedEntity(BattleEntity) {

	Origin origin;
	GameScreen screen;
	boolean showing;
	ShaderManager shaderManager;
	GameObjectParticles particles;
	String name;
	Vector2 position;
	Vector2 offset;
	Vector2 scale;
	byte layer;
	boolean flipX;
	boolean flipY;
	CColor tint;
	TintManager tintManager;
	Patchwork patchwork;
	Rectangle mask;
	Battle battle;
	final BEConditions hideHealth;
	final BEConditions floating;
	final BEConditions invincible;
	final BEConditions semiInvincible;
	final BEConditions ghost;
	final BEConditions invisible;
	final BEConditions locked;
	final BEConditions immovable;
	final BEConditions uncastable;
	final BattleEntityListenerList listeners;
	VocGauges gauges;
	BattleEntityStats stats;
	final CrushGauge crushGauge;
	final BattleEntitySpeed updateSpeed;
	final BattleEntitySpeed actionSpeed;
	final StatusManager status;
	boolean hide;
	GameObject attachObject;
	BattleEntity parent;
	BattleEntityLife life;
	LocalizedMessage talkingName;
	BattleEntityData data;
	CustomCache palette;
	BattleEntityHealth health;
	VocElement element;
	Party party;
	int panelX;
	int panelY;
	int xSize;
	int ySize;
	Mover movement;
	BattleEntityAction action;
	Controller controller;
	AttackPlan attack;
	boolean turned;
	boolean controlled;
	boolean vital;
	boolean occupyPanels;
	boolean mustSurvive;
	boolean cracksPanel;
	BattleEntityAnimation spawnAnimation;
	BattleEntityAnimation despawnAnimation;
	BattleEntityAnimation deathAnimation;
	ScreenObject lastAnimation;
	VocPack pack;
	SpawnCondition spawnCondition;

	new(BattleEntityData arg0, CustomCache arg1, HitProperty arg2, Party arg3, int arg4, int arg5) {}

	new(BattleEntityData arg0, CustomCache arg1, Party arg2, VocElement arg3, int arg4, int arg5) {}

	final boolean equals(Object arg0) {}

	String toString() {}

	final int hashCode() {}

	void dispose() {}

	void update(float arg0) {}

	boolean remove() {}

	final String getName() {}

	final void init(GameScreen arg0) {}

	boolean isHidden() {}

	void resize(boolean arg0, int arg1, int arg2) {}

	void draw(CustomSpriteBatch arg0, float arg1, float arg2) {}

	void hide(GameScreen arg0) {}

	void show(GameScreen arg0) {}

	byte getLayer() {}

	float getComparisonKey() {}

	final Origin getOrigin() {}

	final void addObject(ScreenObject arg0) {}

	final void removeObject() {}

	final SoundContainer playSound(Sounds arg0) {}

	SoundContainer playSound(float arg0, float arg1, SoundInfo arg2) {}

	SoundContainer playSound(SoundInfo arg0) {}

	void triggerEvent(Object arg0, Object arg1, Object[] arg2) {}

	final Vector2 getSize() {}

	Vector2 toCenter(Vector2 arg0) {}

	final PatchworkStateId getState() {}

	void resetState() {}

	void draw(CustomSpriteBatch arg0, float arg1, float arg2, float arg3, float arg4) {}

	void draw(CustomSpriteBatch arg0) {}

	CColor calculateTint() {}

	void updateParticles(float arg0) {}

	final boolean inState(PatchworkStateId arg0) {}

	final boolean isFlipX() {}

	final boolean isFlipY() {}

	final Patchwork getPatchwork() {}

	Patchwork setPatchwork(Patchwork arg0) {}

	final Patchwork setPatchwork(ID arg0) {}

	final Vector2 getScale() {}

	final void resetTint() {}

	final boolean hasState(PatchworkStateId arg0) {}

	final void resetAnimation() {}

	boolean setState(PatchworkStateId arg0) {}

	void updateGraphics(float arg0) {}

	final boolean isAnimationFinished() {}

	final void setAnimationDuration(double arg0) {}

	boolean isTurned() {}

	float getShadowAlpha() {}

	void drawShadow(CustomSpriteBatch arg0, float arg1, float arg2, float arg3) {}

	List getShadowDrawables() {}

	final String getTalking() {}

	final DialogueVoice getVoice() {}

	final BattleField getField() {}

	void init(Battle arg0) {}

	void interrupt() {}

	final boolean isAlive() {}

	void reset() {}

	void setSize(int arg0, int arg1) {}

	boolean isAccessibleField(int arg0, int arg1, boolean arg2) {}

	boolean isAccessibleField(int arg0, int arg1, boolean arg2, boolean arg3) {}

	final boolean isAccessibleField(int arg0, int arg1) {}

	boolean isAccessibleField(BattleField arg0, int arg1, int arg2, boolean arg3) {}

	boolean isAccessibleField(BattleField arg0, int arg1, int arg2, boolean arg3, boolean arg4) {}

	void setAction(BattleEntityAction arg0) {}

	void startDeath(BattleEntity arg0) {}

	void despawn() {}

	void spawn() {}

	BattlePlayer createPlayer() {}

	void removeAction() {}

	AttackPlan createPlan(VocEntry arg0, int arg1, KeyCode arg2) {}

	void changePalette(CustomCache arg0) {}

	boolean attack(AttackPlan arg0) {}

	boolean attack(VocEntry arg0, int arg1, KeyCode arg2) {}

	void occupyPanels() {}

	void block(OwnedHitProperty arg0) {}

	void onInflict(BattleEntity arg0, OwnedHitProperty arg1) {}

	void hitApply(OwnedHitProperty arg0) {}

	boolean canInflict(HitProperty arg0) {}

	void setTurned(boolean arg0) {}

	boolean isAttacking() {}

	void crush(double arg0, int arg1) {}

	final BattleEntityAction setActionComplex(int arg0, boolean arg1) {}

	boolean occupies(BattleLiberationData arg0) {}

	boolean occupies(BattleLiberationData arg0, Point arg1) {}

	boolean occupies(int arg0, int arg1) {}

	boolean occupies(BattleEntity arg0) {}

	Ailment inflictAilment(BattleEntity arg0, AilmentInflict arg1) {}

	void setController(Controller arg0) {}

	void makeHitParticle(HitType arg0, Color arg1) {}

	void semiBlock(OwnedHitProperty arg0) {}

	final void changeData(BattleEntityData arg0, CustomCache arg1) {}

	void stopAttack() {}

	boolean inflict(OwnedHitProperty arg0) {}

	void heal(BattleEntity arg0, int arg1) {}

	void heal(BattleEntity arg0, int arg1, Color arg2) {}

	void setPanelPosition(int arg0, int arg1) {}

	float getPanelX(BattleField arg0, int arg1) {}

	float getPanelY(BattleField arg0, int arg1) {}

	final void setActionData(BattleEntityActionData arg0) {}

	void onHit(BattleEntity arg0, HitProperty arg1, int arg2) {}

	void refreshPanel() {}

	void displayText(StringDisplay arg0) {}

	StringDisplay displayText(String arg0, Color arg1) {}

	StringDisplay displayText(String arg0, Color arg1, float arg2) {}

	Vector2 getPanelOffset() {}

	void drawHealth(CustomSpriteBatch arg0, float arg1, float arg2) {}

	void freePanels() {}

	final void freePanel(int arg0, int arg1) {}

	final boolean isBattleClient() {}

	final GameObject getAttach() {}

	final void occupyPanel(int arg0, int arg1) {}

	final BattleFieldBorder getFieldBorder() {}

	void cancelMovement() {}

	boolean isMoving() {}

	final void respawn(int arg0, int arg1) {}

	void updateGauge(double arg0) {}

	void kill(BattleEntity arg0) {}

	final boolean isAuthorative() {}

	final void startAnimation(ScreenObject arg0) {}

	void die(BattleEntity arg0) {}

	boolean canReachPanel(int arg0, int arg1) {}

	boolean isMoveable() {}

	void setPanel(int arg0, int arg1) {}

	Mover move(MoveType arg0, int arg1, int arg2, float arg3) {}

	void move(float arg0) {}

	Mover move(Mover arg0) {}

	Mover move(Mover arg0, boolean arg1) {}

	Mover move(MoveType arg0, int arg1, int arg2, float arg3, boolean arg4) {}

	void hurt(BattleEntity arg0, int arg1) {}

	void hurt(BattleEntity arg0, int arg1, Color arg2) {}

	void updateAttack(float arg0) {}

	void drawUltra(CustomSpriteBatch arg0, float arg1, float arg2, float arg3, float arg4) {}

	void displayAttackName(String arg0, Color arg1) {}

	void displayHealthText(int arg0, Color arg1) {}

	final BattleEntity getAbsoluteParent() {}

}
