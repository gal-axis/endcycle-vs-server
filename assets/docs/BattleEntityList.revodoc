BattleEntityList(Array) {

	BattleEntity[] items;
	int size;
	boolean ordered;

	new(Array battleEntities) {}

	new(BattleEntity[] battleEntities) {}

	new(int capacity) {}

	new() {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	ArrayIterator iterator() {}

	void add(BattleEntity arg0, BattleEntity arg1, BattleEntity arg2) {}

	void add(BattleEntity arg0, BattleEntity arg1, BattleEntity arg2, BattleEntity arg3) {}

	void add(BattleEntity arg0, BattleEntity arg1) {}

	void add(BattleEntity arg0) {}

	BattleEntity get(int arg0) {}

	String toString(String arg0) {}

	int indexOf(BattleEntity arg0, boolean arg1) {}

	void clear() {}

	boolean contains(BattleEntity arg0, boolean arg1) {}

	boolean isEmpty() {}

	int lastIndexOf(BattleEntity arg0, boolean arg1) {}

	BattleEntity[] toArray() {}

	void addAll(Array arg0) {}

	void addAll(Array arg0, int arg1, int arg2) {}

	void addAll(BattleEntity[] arg0) {}

	void addAll(BattleEntity[] arg0, int arg1, int arg2) {}

	BattleEntity pop() {}

	BattleEntity first() {}

	void set(int arg0, BattleEntity arg1) {}

	void insert(int arg0, BattleEntity arg1) {}

	BattleEntity[] ensureCapacity(int arg0) {}

	void reverse() {}

	BattleEntity peek() {}

	void truncate(int arg0) {}

	boolean containsAll(Array arg0, boolean arg1) {}

	boolean removeAll(Array arg0, boolean arg1) {}

	void removeRange(int arg0, int arg1) {}

	BattleEntity[] setSize(int arg0) {}

	void sort(Comparator arg0) {}

	void sort() {}

	void shuffle() {}

	void swap(int arg0, int arg1) {}

	BattleEntity random() {}

	void insertRange(int arg0, int arg1) {}

	BattleEntity[] shrink() {}

	boolean removeValue(BattleEntity arg0, boolean arg1) {}

	BattleEntity removeIndex(int arg0) {}

	boolean containsAny(Array arg0, boolean arg1) {}

	boolean notEmpty() {}

	BattleEntity selectRanked(Comparator arg0, int arg1) {}

	boolean equalsIdentity(Object arg0) {}

	int selectRankedIndex(Comparator arg0, int arg1) {}

	BattleEntity get(String name) {}

	BattleEntityList check(BattleEntityList collection, BECondition filter) {}

	Party getWinner() {}

	BattleEntityList beFrom(Party party) {}

	BattleEntityList beFrom(Party party, boolean neutral, BattleEntityList collection) {}

	BattleEntityList beFrom(Party party, boolean neutral) {}

	BattleEntityList beFrom(Party party, BattleEntityList collection) {}

	BattleEntityList beFloating(boolean floating) {}

	BattleEntityList beFloating(boolean floating, BattleEntityList collection) {}

	BattleEntityList beNotAt(int xTile, int yTile, BattleEntityList collection) {}

	BattleEntityList beNotAt(int xTile, int yTile) {}

	BattleEntityList beNotFrom(Party party, BattleEntityList collection) {}

	BattleEntityList beNotFrom(Party party) {}

	BattleEntityList isCrushed(BattleEntityList collection) {}

	BattleEntityList beAtRow(int xTile, BattleEntityList collection) {}

	BattleEntityList beAtRow(int xTile) {}

	BattleEntityList beAtCol(int yTile) {}

	BattleEntityList beAtCol(int yTile, BattleEntityList collection) {}

	boolean hasVitalAndAlive(Party party) {}

}
