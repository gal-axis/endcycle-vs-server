BattleFieldPanel(Object) : SpeedSupplier {

	final BoundedFloat revert;
	final BattleField field;
	final int x;
	final int y;
	BattleFieldBorder border;
	Drawable enemyPanel;
	Drawable friendlyPanel;
	Drawable neutralPanel;
	Drawable noPanel;
	Party originalParty;
	PanelType originalType;
	boolean fixed;
	Party party;
	Party oldParty;
	BattleFieldPanel copied;
	BattleFieldPanel dependsOn;
	PanelType type;
	PanelEffect effect;
	float xOffset;
	float yOffset;
	float animation;
	Array entities;

	new(BattleField field, int x, int y, FieldPanelData data) {}

	new(BattleField field, int x, int y) {}

	new(BattleField field, int x, int y, Party party, PanelType tileType, boolean fixed) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	double getSpeed(BattleEntity entity) {}

	boolean isActionRollback(Object[] action) {}

	void actionTriggered(Object[] action) {}

	void actionTriggered(Runnable action) {}

	void update(float delta) {}

	void init() {}

	boolean isAccessible(BattleEntity entity, boolean checkFree, boolean checkParty) {}

	boolean isAccessible(Party party) {}

	PanelType getType() {}

	Vector2 getOffset(BattleEntity entity) {}

	void setType(PanelType tile) {}

	void playSound(SoundInfo sound) {}

	void draw(Batch batch, float x, float y) {}

	void draw(Batch batch, float x, float y, float shade) {}

	boolean isBattleClient() {}

	OwnedHitProperty hit(OwnedHitProperty hitProperty) {}

	void triggerEvent(Object type, Object trigger, Object[] parameters) {}

	final void triggerAction(Object[] parameters) {}

	void changeData(FieldPanelData data) {}

	boolean setParty(Party party, BattleFieldPanel connected) {}

	boolean setParty(Party party, BattleFieldPanel connected, boolean sound) {}

	boolean setParty(Party party, BattleFieldPanel connected, boolean sound, boolean mock) {}

	void changeType(PanelType type) {}

	boolean changeParty(Party newParty, BattleFieldPanel connected) {}

	boolean free(BattleEntity entity) {}

	void occupy(BattleEntity entity) {}

	BattleFieldBorder getCameraBorder(BattleEntity focused) {}

	boolean occupied(boolean ignoreFloat) {}

	void resetRevert() {}

	boolean isOccupied() {}

	boolean isOccupied(BattleEntity entity) {}

	void effectInit() {}

	void effectRefresh() {}

	void calculateOffsets() {}

	boolean isShared() {}

	void drawDefault(Batch batch, float x, float y, Party party, float shade) {}

	void revertPanel() {}

	boolean occupiedBy(Party party) {}

	boolean canRevertParty(Party direction) {}

	OwnedHitProperty affect(OwnedHitProperty hitProperty) {}

	boolean isTypeChanged() {}

	boolean isPartyChanged() {}

	void effectDispose() {}

}
