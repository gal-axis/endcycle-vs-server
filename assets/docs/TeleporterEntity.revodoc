final TeleporterEntity(BattleEntity) : BannedPanelObject, TeleportEntityAction {

	Origin origin;
	GameScreen screen;
	boolean showing;
	ShaderManager shaderManager;
	GameObjectParticles particles;
	String name;
	float x;
	float y;
	byte layer;
	boolean flipX;
	boolean flipY;
	CColor tint;
	TintManager tintManager;
	Patchwork patchwork;
	float xScale;
	float yScale;
	float xOffset;
	float yOffset;
	Rectangle mask;
	Battle battle;
	final BEConditions hideHealth;
	final BEConditions floating;
	final BEConditions invincible;
	final BEConditions semiInvincible;
	final BEConditions ghost;
	final BEConditions invisible;
	final BEConditions locked;
	final BEConditions immovable;
	final BEConditions uncastable;
	final BattleEntityListenerList listeners;
	final VocGauges gauges;
	final CrushGauge crushGauge;
	final BattleEntitySpeed updateSpeed;
	final BattleEntitySpeed actionSpeed;
	final StatusManager status;
	boolean hide;
	GameObject attachObject;
	BattleEntity parent;
	BattleEntityLife life;
	LocalizedMessage talkingName;
	BattleEntityData data;
	CustomCache palette;
	BattleEntityHealth health;
	VocElement element;
	Party party;
	int panelX;
	int panelY;
	int xSize;
	int ySize;
	Mover movement;
	BattleEntityAction action;
	Controller controller;
	AttackPlan attack;
	int strength;
	int crushStrength;
	int speed;
	int resistance;
	boolean turned;
	boolean controlled;
	boolean vital;
	boolean occupyPanels;
	boolean mustSurvive;
	boolean cracksPanel;
	BattleEntityAnimation spawnAnimation;
	BattleEntityAnimation despawnAnimation;
	BattleEntityAnimation deathAnimation;
	ScreenObject lastAnimation;
	VocPack pack;
	TeleportEntityAction teleportAction;

	new(BattleEntityData data, CustomCache customizations, int x, int y) {}

	final boolean equals(Object obj) {}

	String toString() {}

	final int hashCode() {}

	void dispose() {}

	void update(float delta) {}

	boolean remove() {}

	final String getName() {}

	final void init(GameScreen screen) {}

	boolean isHidden() {}

	void resize(boolean landscape, int width, int height) {}

	void show(GameScreen screen) {}

	void hide(GameScreen screen) {}

	void draw(CustomSpriteBatch batch, float xOfs, float yOfs) {}

	final Origin getOrigin() {}

	byte getLayer() {}

	float getComparisonKey() {}

	final void removeObject() {}

	final SoundContainer playSound(Sounds sound) {}

	SoundContainer playSound(float x, float y, SoundInfo sound) {}

	SoundContainer playSound(SoundInfo sound) {}

	void triggerEvent(Object type, Object trigger, Object[] parameters) {}

	final PatchworkStateId getState() {}

	void resetState() {}

	void draw(CustomSpriteBatch batch, float xOfs, float yOfs, float scaleX, float scaleY) {}

	void draw(CustomSpriteBatch batch) {}

	CColor calculateTint() {}

	final float getWidth() {}

	final float getHeight() {}

	final boolean inState(PatchworkStateId name) {}

	final boolean isFlipY() {}

	void updateParticles(float delta) {}

	final void resetTint() {}

	final void resetAnimation() {}

	final float getXScale() {}

	final float getYScale() {}

	boolean setState(PatchworkStateId name) {}

	final boolean isFlipX() {}

	final Patchwork getPatchwork() {}

	final boolean hasState(PatchworkStateId name) {}

	Patchwork setPatchwork(Patchwork patchwork) {}

	final Patchwork setPatchwork(ID id) {}

	void updateGraphics(float delta) {}

	final boolean isAnimationFinished() {}

	final void setAnimationDuration(double duration) {}

	List getShadowDrawables() {}

	float getShadowX() {}

	float getShadowZ() {}

	float getShadowAlpha() {}

	float getShadowY() {}

	final String getTalking() {}

	final DialogueVoice getVoice() {}

	final BattleField getField() {}

	void init(Battle battle) {}

	void interrupt() {}

	final boolean isAlive() {}

	void reset() {}

	void setSize(int xSize, int ySize) {}

	void spawn() {}

	void startDeath(BattleEntity killer) {}

	void despawn() {}

	BattlePlayer createPlayer() {}

	void removeAction() {}

	void setAction(BattleEntityAction action) {}

	final boolean isAuthorative() {}

	void occupyPanels() {}

	final void changeData(BattleEntityData info, CustomCache customizations) {}

	void crush(double amount, int crushStrength) {}

	boolean attack(VocEntry voc, KeyCode code) {}

	boolean attack(AttackPlan attackPlan) {}

	final BattleEntity getAbsoluteParent() {}

	void displayHealthText(int amount) {}

	final boolean isAccessibleField(int x, int y) {}

	boolean isAccessibleField(int x, int y, boolean free) {}

	boolean isAccessibleField(BattleField field, int x, int y, boolean checkFree, boolean checkParty) {}

	boolean isAccessibleField(BattleField field, int x, int y, boolean checkFree) {}

	boolean isAccessibleField(int x, int y, boolean checkFree, boolean checkParty) {}

	void displayAttackName(String name, Color color) {}

	final BattleFieldBorder getFieldBorder() {}

	final void respawn(int x, int y) {}

	boolean canReachPanel(int x, int y) {}

	boolean isAttacking() {}

	void changePalette(CustomCache palette) {}

	void hurt(BattleEntity origin, int amount) {}

	void hurt(BattleEntity origin, int amount, boolean display) {}

	void onHit(BattleEntity entity, HitProperty hit, int damage) {}

	final void setActionData(BattleEntityActionData data) {}

	AttackPlan createPlan(VocEntry voc, KeyCode code) {}

	final BattleEntityAction setActionComplex(int level) {}

	void displayText(StringDisplay stringDisplay) {}

	StringDisplay displayText(String attack, Color color, float time) {}

	StringDisplay displayText(String attack, Color color) {}

	void stopAttack() {}

	boolean inflict(OwnedHitProperty hit) {}

	void setTurned(boolean turned) {}

	void block(OwnedHitProperty hit) {}

	void hitApply(OwnedHitProperty hit) {}

	boolean occupies(int x, int y) {}

	boolean occupies(BattleEntity entity) {}

	void setPanelPosition(int x, int y) {}

	boolean canInflict(HitProperty hitProperty) {}

	void makeHitParticle(HitType type, Color color) {}

	final boolean isBattleClient() {}

	void onInflict(BattleEntity entity, OwnedHitProperty property) {}

	void semiBlock(OwnedHitProperty hit) {}

	void freePanels() {}

	Ailment inflictAilment(BattleEntity owner, AilmentInflict inflict) {}

	Mover move(Mover mover) {}

	Mover move(MoveType type, int xTile, int yTile, float speed) {}

	Mover move(Mover mover, boolean rollback) {}

	Mover move(MoveType type, int xTile, int yTile, float speed, boolean rollback) {}

	void move(float delta) {}

	void updateGauge(double delta) {}

	final GameObject getAttach() {}

	void refreshPanel() {}

	final void freePanel(int x, int y) {}

	final void occupyPanel(int x, int y) {}

	Vector2 getPanelOffset() {}

	boolean isMoveable() {}

	boolean isMoving() {}

	void updateAttack(float delta) {}

	void drawHealth(CustomSpriteBatch batch, float xOfs, float yOfs) {}

	void heal(BattleEntity origin, int amount) {}

	void heal(BattleEntity origin, int amount, boolean display) {}

	void kill(BattleEntity killer) {}

	final void startAnimation(ScreenObject animation) {}

	void cancelMovement() {}

	float getPanelY(BattleField field, int y) {}

	void die(BattleEntity killer) {}

	float getPanelX(BattleField field, int x) {}

	void teleport(BattleEntity entity, BattleEntity target, Point point) {}

	boolean isBannedPanel(BattleEntity entity, int x, int y) {}

	boolean isBannedPanelRemove(BattleEntity entity) {}

	float getBannedPanelPriority(BattleEntity entity) {}

}
