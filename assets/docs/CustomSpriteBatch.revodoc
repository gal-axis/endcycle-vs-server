CustomSpriteBatch(SpriteBatch) {

	int renderCalls;
	int totalRenderCalls;
	int maxSpritesInBatch;

	new() {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	void dispose() {}

	void flush() {}

	void end() {}

	void draw(Texture arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8) {}

	void draw(Texture arg0, float arg1, float arg2) {}

	void draw(Texture arg0, float arg1, float arg2, int arg3, int arg4, int arg5, int arg6) {}

	void draw(Texture arg0, float arg1, float arg2, float arg3, float arg4, int arg5, int arg6, int arg7, int arg8, boolean arg9, boolean arg10) {}

	void draw(Texture arg0, float arg1, float arg2, float arg3, float arg4) {}

	void draw(Texture arg0, float[] arg1, int arg2, int arg3) {}

	void draw(TextureRegion arg0, float arg1, float arg2) {}

	void draw(TextureRegion arg0, float arg1, float arg2, Affine2 arg3) {}

	void draw(TextureRegion arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, boolean arg10) {}

	void draw(TextureRegion arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9) {}

	void draw(TextureRegion arg0, float arg1, float arg2, float arg3, float arg4) {}

	void draw(Texture arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, int arg10, int arg11, int arg12, int arg13, boolean arg14, boolean arg15) {}

	boolean isDrawing() {}

	void begin() {}

	void setColor(float r, float g, float b, float a) {}

	void setColor(Color tint) {}

	Color getColor() {}

	int getBlendSrcFuncAlpha() {}

	int getBlendDstFuncAlpha() {}

	Matrix4 getProjectionMatrix() {}

	void setTransformMatrix(Matrix4 transform) {}

	void setProjectionMatrix(Matrix4 arg0) {}

	boolean isBlendingEnabled() {}

	Matrix4 getTransformMatrix() {}

	void setBlendFunctionSeparate(int arg0, int arg1, int arg2, int arg3) {}

	int getBlendSrcFunc() {}

	ShaderProgram getShader() {}

	void enableBlending() {}

	void setPackedColor(float color) {}

	void disableBlending() {}

	void setBlendFunction(int arg0, int arg1) {}

	int getBlendDstFunc() {}

	void setShader(ShaderProgram shader) {}

	float getPackedColor() {}

	void clear() {}

	void reset() {}

	Rectangle getMask() {}

	void draw(FrameBuffer frameBuffer, float x, float y, float width, float height) {}

	void draw(FrameBuffer frameBuffer, float x, float y) {}

	void stopMasking() {}

	void startMasking(float x, float y, float width, float height, boolean relative) {}

	void startMasking(float x, float y, float width, float height) {}

	void drawScreenTint(Color c) {}

	void drawScreenTint(float a) {}

	void drawScreenTint(float r, float g, float b, float a) {}

	void clearTransparent() {}

	void bind(FrameBuffer buffer) {}

	void setBlendFunction(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {}

	void drawRectangle(float x, float y, float w, float h, Color c) {}

	void drawRectangle(float x, float y, float w, float h, float r, float g, float b, float a) {}

	void resetBlendFunction() {}

	void setScale(float scaleX, float scaleY) {}

	FrameBuffer unbind() {}

	final float getScaleY() {}

	final float getScaleX() {}

	void removeTransformMatrix(Matrix4 matrix) {}

	void setScaleTranslation(float x, float y, float scaleX, float scaleY) {}

	void recalculateTransformMatrix() {}

	BatchRectangle getBatchRectangle() {}

	void addTransformMatrix(Matrix4 matrix) {}

	void updateView(FrameBuffer buffer) {}

	final float getTranslationY() {}

	final float getTranslationX() {}

	void setShaderType(ShaderType shader) {}

}
