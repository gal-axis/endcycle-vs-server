MoveWrapperAttack(WrapperAttack) : BECondition {

	Array attackTasks;
	String name;
	int level;
	int gaugeIndex;
	double gaugeConsume;
	boolean timerStopped;
	float timer;
	float duration;
	boolean interruptable;
	boolean moveable;
	boolean locksControls;
	boolean locksTurn;
	KeyCode keyCode;
	PatchworkStateId castAnimation;
	PatchworkStateId attackAnimation;
	Party party;
	BattleEntity user;
	BattleEntityList targets;
	AttackPlan plan;
	Object origin;
	WrappedAttackSender wrappedSender;
	OwnedHitProperty property;
	AttackShellWrapper wrapper;
	Attack wrapped;
	boolean emptyGauge;
	boolean started;
	int moveX;
	int moveY;
	boolean turn;
	MoveType forward;
	MoveType backward;
	boolean checkOccupied;
	boolean ghost;
	float speed;
	int originalX;
	int originalY;
	boolean turned;
	boolean moved;
	boolean finished;
	Mover mover;
	List events;

	new() {}

	new(Attack attack) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	Attack clone() {}

	boolean isActionRollback(Object[] action) {}

	void actionTriggered(Object[] action) {}

	final void actionTriggered(Runnable action) {}

	boolean priority() {}

	void controllerConnected(Controller controller) {}

	void controllerDisconnected(Controller controller) {}

	boolean keyUp(int keycode) {}

	boolean triggerButton(ButtonEvent event) {}

	boolean triggerTouch(TouchEvent event) {}

	boolean addButtonTips(ButtonTipList tips) {}

	boolean keyDown(int keycode) {}

	boolean keyTyped(char character) {}

	boolean triggerType(int character) {}

	String getName() {}

	void update(float delta) {}

	Attack cast(BattleEntity user, AttackPlan plan) {}

	final BattleField getField() {}

	void start() {}

	final void copy(Attack attack) {}

	BattleEntity getTarget() {}

	void flip() {}

	final float getY(int yTile) {}

	final float getX(int xTile) {}

	boolean acceptsInput(ButtonEvent event) {}

	void setAnimationDuration(float duration) {}

	boolean active() {}

	SoundContainer playSound(SoundInfo sound) {}

	void finish() {}

	final void triggerAction(Object[] parameters) {}

	void attackAnimation() {}

	void castAnimation() {}

	final Origin getOrigin(int index) {}

	boolean fillGauges() {}

	final Controller getController() {}

	final int getYTile() {}

	final int getXTile() {}

	Attack charge() {}

	Attack getWrapped(AttackShellWrapper wrapper, boolean shareHit, boolean gauge) {}

	final BattleEntityList getBattleEntities() {}

	void setAnimationState(PatchworkStateId state) {}

	void updateAttackTasks(float delta) {}

	boolean hasAnimationState(PatchworkStateId state) {}

	void addWrappers(Array wrappers) {}

	AttackPortal getPortal(BattleEntity entity, float portalX, float portalY, float time) {}

	boolean reduceGauge(double amount) {}

	boolean reduceGauge() {}

	double getGaugeProgress() {}

	void runAction(int action) {}

	void scheduleAction(Runnable action, float delay) {}

	void scheduleAction(int action, float delay) {}

	final int getTurn() {}

	final int getXTileInFront() {}

	void increaseGauge(double amount) {}

	void finishWrapped() {}

	boolean updateWrapped(float delta) {}

	boolean isWrappedStarted() {}

	void createAttack() {}

	void startWrapped() {}

	boolean test(BattleEntity entity) {}

	void moveBack(MoveType type) {}

}
