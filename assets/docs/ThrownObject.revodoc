ThrownObject(GameObject) : ShadowEntity, Turnable, Danger {

	Origin origin;
	GameScreen screen;
	boolean showing;
	ShaderManager shaderManager;
	GameObjectParticles particles;
	String name;
	float x;
	float y;
	byte layer;
	boolean flipX;
	boolean flipY;
	CColor tint;
	TintManager tintManager;
	Patchwork patchwork;
	float xScale;
	float yScale;
	float xOffset;
	float yOffset;
	Rectangle mask;
	float throwHeight;
	float speed;
	float originX;
	float originY;
	int targetX;
	int targetY;
	Party party;
	float position;
	LandAction action;
	float yTippingPoint;
	Battle battle;
	boolean scale;
	boolean mock;

	new(Patchwork patchwork, float x, float y, int targetX, int targetY, float speed, Party party, LandAction action) {}

	final boolean equals(Object obj) {}

	String toString() {}

	final int hashCode() {}

	void dispose() {}

	void update(float delta) {}

	boolean remove() {}

	final String getName() {}

	void init(GameScreen screen) {}

	boolean isHidden() {}

	void resize(boolean landscape, int width, int height) {}

	void hide(GameScreen screen) {}

	void show(GameScreen screen) {}

	void draw(CustomSpriteBatch batch, float xOfs, float yOfs) {}

	float getComparisonKey() {}

	final Origin getOrigin() {}

	byte getLayer() {}

	SoundContainer playSound(float x, float y, SoundInfo sound) {}

	final SoundContainer playSound(Sounds sound) {}

	SoundContainer playSound(SoundInfo sound) {}

	final void addObject(ScreenObject object) {}

	final void removeObject() {}

	void triggerEvent(Object type, Object trigger, Object[] parameters) {}

	final float getWidth() {}

	final float getHeight() {}

	float getCenterX() {}

	float getCenterY() {}

	final PatchworkStateId getState() {}

	void resetState() {}

	CColor calculateTint() {}

	final void setAnimationDuration(double duration) {}

	final boolean isAnimationFinished() {}

	void draw(CustomSpriteBatch batch, float xOfs, float yOfs, float scaleX, float scaleY) {}

	void draw(CustomSpriteBatch batch) {}

	final boolean isFlipX() {}

	final void resetAnimation() {}

	final Patchwork setPatchwork(ID id) {}

	Patchwork setPatchwork(Patchwork patchwork) {}

	final float getYScale() {}

	final boolean inState(PatchworkStateId name) {}

	final boolean isFlipY() {}

	void updateGraphics(float delta) {}

	void updateParticles(float delta) {}

	final void resetTint() {}

	boolean setState(PatchworkStateId state) {}

	final Patchwork getPatchwork() {}

	final boolean hasState(PatchworkStateId name) {}

	final float getXScale() {}

	boolean isDangerous(BattleEntity entity, int x, int y) {}

	float getDangerIgnore(int level) {}

	float getDangerPriority(BattleEntity entity) {}

	boolean isTurned() {}

	List getShadowDrawables() {}

	float getShadowX() {}

	float getShadowAlpha() {}

	float getShadowZ() {}

	float getShadowY() {}

	boolean isOnTile() {}

	void setSound(SoundInfo sound) {}

	void setLandActions(FloatTimerAction action) {}

	SoundInfo getSound() {}

	void updatePos() {}

}
