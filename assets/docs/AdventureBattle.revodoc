AdventureBattle(Battle) {

	final ButtonTipChecker buttonTips;
	GameScreenInfo info;
	AudioHandler audio;
	Layers layers;
	GameEventHandler events;
	ScreenInputHandler input;
	GameScreenTimer timer;
	Shaker shaker;
	ScreenConnection connection;
	float timeScale;
	final Array players;
	final GoalTracker goalTracker;
	BattleScreen screen;
	DuplicateEntityManager duplicateManager;
	BattleEntityList entities;
	BackgroundObject background;
	BattleField field;
	BattleData data;
	HitShaker hitShaker;
	ID song;
	MusicData victoryTheme;
	BattleCamera camera;
	BattleZoomProcessor zoomProcessor;
	BattleMode mode;
	Looter looter;
	boolean run;
	boolean versus;
	BattleState state;
	BattleSubState substate;
	String seed;
	Random eventRandom;
	Random generateRandom;
	AdventureNodeGenerator generator;
	AdventureItemInventory inventory;
	AdventureStart start;
	AdventurePath path;
	AdventureFieldData fieldData;
	AdventureFaction faction;
	final Set visitedZones;
	final Array visitedNodes;
	final Array zoneFilters;
	AdventureFieldNode last;
	AdventureFieldNode active;
	int zoneLevel;
	ID nextZone;
	AdventureEventStartListener startListener;
	boolean combat;
	RandomVocRewards vocRewards;
	boolean adventureFinished;
	boolean adventureWon;
	GameDifficulty difficulty;
	int level;
	BattleGoalDisplayer goalDisplayer;
	boolean leaveVitalAlive;
	Runnable onStart;
	Runnable onWin;
	Runnable onLose;
	Runnable onOver;
	AdventureEntityHurtListener hurtListener;
	final SpeedSupplier enemyAI;
	BattleEntity player;
	BattleEntity companion;

	new(GameDifficulty difficulty, String seed, BattleEntityData character) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	GameScreen get() {}

	void update(float delta) {}

	ScreenObject getObject(String name) {}

	void init() {}

	void resume() {}

	void resize(boolean landscape, int width, int height) {}

	void pause() {}

	void removeRenderProcessor(RenderProcessor renderProcessor) {}

	Array getRenderProcessors() {}

	void addRenderProcessor(RenderProcessor renderProcessor) {}

	GameScreen getPreviousScreen() {}

	void setPreviousScreen(GameScreen previousScreen) {}

	Object[] getTextArguments() {}

	void addScript(Script script, float delay) {}

	boolean isLoading() {}

	void shake(float x, float y, float duration) {}

	ScreenObject addObject(ScreenObject object) {}

	void updateObjects(float delta) {}

	void toPreviousScreen() {}

	void toPreviousScreen(FadeType type) {}

	void render(float delta) {}

	boolean isCurrentScreen() {}

	Array getObjects() {}

	void resetShake() {}

	void shakeVibrate(float x, float y, float duration) {}

	boolean isShaking() {}

	void hide() {}

	void changeTo(GameScreen screen, boolean init) {}

	void drawButtonTips(CustomSpriteBatch batch, float x, float y) {}

	void dispose() {}

	void clearObjects() {}

	void updateTimer(float delta) {}

	void changeFrom(GameScreen screen, boolean init) {}

	void draw(CustomSpriteBatch batch, float xOfs, float yOfs) {}

	void draw(CustomSpriteBatch batch) {}

	void show() {}

	void resetTimer() {}

	boolean removeObject(ScreenObject object) {}

	void updateShake(float delta) {}

	void setScreen(GameScreen screen, FadeType fade) {}

	void setScreen(GameScreen screen) {}

	void setScreen(GameScreen screen, FadeType fade, boolean changesBefore) {}

	boolean isUpdatable(ScreenObject object) {}

	String getName() {}

	void load() {}

	void start() {}

	void stop() {}

	void win(Party winner) {}

	void removeEntity(BattleEntity entity) {}

	BattlePlayer setPlayerEntity(int index, BattleEntity entity) {}

	void killEntity(BattleEntity entity) {}

	void killZoom(BattleEntity entity) {}

	BattlePlayer getPlayer(int index) {}

	BattlePlayer getPlayer() {}

	void startDeath(BattleEntity entity) {}

	void hitStop(float time, Runnable after) {}

	void hitZoom(BattleEntity entity, float zoom, float time, float speed) {}

	boolean isMultiplayer() {}

	BattlePlayer addPlayer(BattleEntity entity) {}

	BattleEntity loadEntity(EntityShell shell, int x, int y) {}

	Battle setBattleData(BattleData data) {}

	final Battle setBattleData(ID data) {}

	BattleEntity getEntity(String name) {}

	void setField(BattleField field) {}

	void setField(BattleFieldData data) {}

	boolean isDespawn(BattleEntity entity) {}

	void addEntity(BattleEntity entity) {}

	boolean isVersus() {}

	BattleEntity getPlayerEntity() {}

	Party getPlayerParty() {}

	BattleEntity getCameraFocus() {}

	int getPlayerIndex(BattleEntity ce) {}

	void startRecording() {}

	boolean isSpawn(BattleEntity entity) {}

	void endBattle() {}

	boolean isDisplayText() {}

	void calculateTint(BattleEntity entity, CColor color) {}

	void restart() {}

	void loot() {}

	boolean canPause() {}

	void goToNext() {}

	BattlePlayer createPlayer(BattleEntity entity) {}

	void lose(Party winner) {}

	int adjustDamage(BattleEntity entity, int damage) {}

	double adjustGaugeSpeed(BattleEntity entity) {}

	MusicContainer playVictoryTheme() {}

	void quit() {}

	Looter createLooter() {}

	void createStarter() {}

	void showStartMessage() {}

	BattleHUD createHUD() {}

	boolean canCreateStarter() {}

	void setBackground(ID id) {}

	void setBackground(BackgroundObject background) {}

	void loadField(ID map) {}

	void initRecording() {}

	void addEntityShells(Array shells, int x, int y, boolean animation) {}

	void playSong() {}

	MusicContainer playSong(ID song) {}

	boolean isAutoRecord() {}

	void setBattleMode(BattleMode mode) {}

	void setCamera(BattleCamera camera) {}

	void stopRecording() {}

	void saveRecording() {}

	BattleEntityList getPlayerEntities() {}

	BattlePauseMessage createPauseMessage() {}

	void vibrateControllers(float duration, float strength) {}

	boolean loot(PickupEntity pickup, BattleEntity entity, int reward, Array item) {}

	boolean loot(PickupEntity pickup, BattleEntity entity, Array items) {}

	void showStart(BattleEntityList enemies) {}

	void setCamera(AdventureFieldNode entry, boolean lock) {}

	void setCombat(boolean combat) {}

	void setCompanion(BattleEntity companion) {}

	void setBattle(boolean leaveVitalAlive, Script onStart, Script onWin, Script onLose, Script onOver) {}

	void showZoneDisplayer() {}

	void finishEvent() {}

	void setPath(ID path) {}

	void removeSpawned() {}

	void enableVocsTemp(AdventureFieldNode entry, Runnable attacked, Runnable healed) {}

	void setVocsEnabled(boolean enabled) {}

	void startCombat(AdventureFieldNode entry, BattleEntityList enemies, boolean animation, boolean message) {}

	void startCombat(AdventureFieldNode entry) {}

	void finishZone() {}

	void setupBattle(AdventureFieldNode entry) {}

	void changeActive(AdventureFieldNode entry, boolean movePlayer) {}

	void loseAdventure() {}

	void increaseLevel() {}

	void winAdventure() {}

	void changeConnections(AdventureFieldNode entry, boolean free) {}

	void setActive(AdventureFieldNode entry) {}

	void loadZone(ID zone) {}

	void loadZone(AdventureZone zoneData, AdventureNodeGraph graph) {}

	void startEvent(AdventureFieldNode entry) {}

	void changeField(AdventureFieldNode entry, boolean destroy, boolean free) {}

}
