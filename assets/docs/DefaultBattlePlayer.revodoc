DefaultBattlePlayer(BattlePlayer) {

	final Array buttons;
	ClientPlayer client;
	final BattleEntity entity;
	Battle battle;
	boolean proMode;
	boolean roleSwitchedLeft;
	boolean roleSwitchedRight;
	BattlePlayerIndicator indicator;
	VocBar vocBar;
	VocUnlockDisplay vocDisplay;
	VocChain chain;
	boolean leftPressed;
	boolean rightPressed;
	boolean upPressed;
	boolean downPressed;
	boolean nonePressed;
	final Point origin;
	final Point move;
	final Point moveBuffer;
	float moveBufferTime;
	float moveReaction;
	float moveReactionTime;
	KeyCode bufferCode;
	VocEntry buffered;
	float vocBufferTime;

	new(BattleEntity arg0) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	void controllerConnected(Controller arg0) {}

	void controllerDisconnected(Controller arg0) {}

	boolean keyTyped(char arg0) {}

	boolean triggerButton(ButtonEvent arg0) {}

	boolean keyDown(int arg0) {}

	boolean addButtonTips(ButtonTipList arg0) {}

	boolean triggerTouch(TouchEvent arg0) {}

	boolean triggerType(int arg0) {}

	boolean keyUp(int arg0) {}

	int getInputPriority() {}

	void add() {}

	void remove() {}

	void update(float arg0) {}

	void init() {}

	void interrupt() {}

	void dispose() {}

	void hit(HitProperty arg0) {}

	boolean isAuthorative() {}

	void hitEntity(BattleEntity arg0, OwnedHitProperty arg1) {}

	BattleEntityActionSave getSave() {}

	void vibrateController(float arg0, float arg1) {}

	final Controller getController() {}

	void move(int arg0, int arg1) {}

	GameScreenMessage createRewardMessage(RandomVocRewards arg0, Random arg1, boolean arg2) {}

	boolean sendClientInput(Object arg0, boolean arg1) {}

	boolean canUpgrade() {}

	void setCombat(boolean arg0) {}

	void setHudButtons(BattleHUD arg0) {}

	void upgrade() {}

	MockController setKeyPressed(KeyCode arg0, boolean arg1) {}

	void createHud(int arg0) {}

	void clientInput(ButtonEvent arg0) {}

	boolean applyInput(KeyCode arg0, boolean arg1, boolean arg2) {}

	void applyInput(float arg0, Object arg1) {}

	void cancelMove() {}

	void cast(VocEntry arg0, KeyCode arg1) {}

	void buffer(VocEntry arg0, KeyCode arg1) {}

	int xTile() {}

	int yTile() {}

	boolean use(VocEntry arg0, KeyCode arg1) {}

	boolean use(int arg0, KeyCode arg1, VocEntry arg2) {}

	void turn() {}

	void startMove(int arg0, int arg1) {}

	void moveCurrentSet(int arg0) {}

	void updateMove() {}

	void updateMove(float arg0) {}

	void updateMove(int arg0, int arg1) {}

	void updateVoc(float arg0) {}

	void wiggleCrushGauge() {}

	void resetVocBuffer() {}

	boolean canAttack() {}

	void updateButtons() {}

	void resetButtons() {}

	void addMove(int arg0, int arg1) {}

	boolean canBuffer(VocEntry arg0) {}

	boolean triggerMove(ButtonEvent arg0) {}

	boolean triggerVoc(ButtonEvent arg0) {}

	boolean triggerSet(ButtonEvent arg0) {}

	boolean useVoc(int arg0, KeyCode arg1) {}

	void updateCurrentSet(boolean arg0) {}

	void setCurrentSet(int arg0, boolean arg1) {}

	void resetMoveBuffer() {}

	void bufferMove(int arg0, int arg1) {}

	boolean useUltra(KeyCode arg0) {}

}
