DefaultBattlePlayer(BattlePlayer) {

	final Array buttons;
	ClientPlayer client;
	final BattleEntity entity;
	Battle battle;
	boolean proMode;
	boolean roleSwitchedLeft;
	boolean roleSwitchedRight;
	BattlePlayerIndicator indicator;
	VocBar vocBar;
	VocUnlockDisplay vocDisplay;
	VocChain chain;
	boolean leftPressed;
	boolean rightPressed;
	boolean upPressed;
	boolean downPressed;
	boolean nonePressed;
	final Point origin;
	final Point move;
	final Point moveBuffer;
	float moveBufferTime;
	float moveReaction;
	float moveReactionTime;
	KeyCode bufferCode;
	VocEntry buffered;
	float vocBufferTime;

	new(BattleEntity entity) {}

	boolean equals(Object arg0) {}

	String toString() {}

	int hashCode() {}

	void controllerDisconnected(Controller controller) {}

	void controllerConnected(Controller controller) {}

	int getInputPriority() {}

	boolean keyTyped(char character) {}

	boolean triggerTouch(TouchEvent event) {}

	boolean triggerButton(ButtonEvent event) {}

	boolean triggerType(int character) {}

	boolean keyDown(int keycode) {}

	boolean addButtonTips(ButtonTipList tips) {}

	boolean keyUp(int keycode) {}

	void add() {}

	void remove() {}

	void update(float delta) {}

	void init() {}

	void interrupt() {}

	void dispose() {}

	boolean isAuthorative() {}

	void hit(HitProperty hitProperty) {}

	void hitEntity(BattleEntity entity, OwnedHitProperty property) {}

	BattleEntityActionSave getSave() {}

	void vibrateController(float duration, float strength) {}

	final Controller getController() {}

	void move(int xTile, int yTile) {}

	void cancelMove() {}

	void setHudButtons(BattleHUD hud) {}

	MockController setKeyPressed(KeyCode code, boolean pressed) {}

	void applyInput(float delay, Object input) {}

	boolean applyInput(KeyCode code, boolean pressed, boolean player) {}

	boolean sendClientInput(Object input, boolean local) {}

	void createHud(int playerIndex) {}

	void upgrade() {}

	boolean canUpgrade() {}

	void setCombat(boolean combat) {}

	void clientInput(ButtonEvent event) {}

	GameScreenMessage createRewardMessage(RandomVocRewards vocs, Random random, boolean skippable) {}

	void cast(VocEntry used, KeyCode keyCode) {}

	void buffer(VocEntry voc, KeyCode keyCode) {}

	int xTile() {}

	int yTile() {}

	boolean use(VocEntry voc, KeyCode keyCode) {}

	boolean use(int index, KeyCode keyCode, VocEntry voc) {}

	void turn() {}

	void updateVoc(float delta) {}

	void addMove(int xMove, int yMove) {}

	void resetMoveBuffer() {}

	void updateButtons() {}

	void resetButtons() {}

	void wiggleCrushGauge() {}

	boolean canBuffer(VocEntry voc) {}

	void updateMove(float delta) {}

	void updateMove() {}

	void updateMove(int xMove, int yMove) {}

	void resetVocBuffer() {}

	boolean canAttack() {}

	void bufferMove(int bufferedX, int bufferedY) {}

	void setCurrentSet(int current, boolean tint) {}

	void updateCurrentSet(boolean rightPriority) {}

	boolean triggerMove(ButtonEvent event) {}

	boolean useVoc(int index, KeyCode keyCode) {}

	boolean triggerVoc(ButtonEvent event) {}

	boolean useUltra(KeyCode keyCode) {}

	void moveCurrentSet(int offset) {}

	boolean triggerSet(ButtonEvent event) {}

	void startMove(int xMove, int yMove) {}

}
